package com.future.datastruct.tree;

/**
 * 红黑树的性质：
 * 1、结点是 RED 或者 BLACK
 * 2、根结点必须是 BLACK
 * 3、叶子结点（假想结点、空结点）都是 BLACK，（由于有这条性质，红黑树其实是一颗真二叉树）
 * 4、RED 结点的子结点必然是 BLACK。
 * -   可推导出 RED 的parent必然是 BLACK
 * -   从根结点到叶子结点的所有路径上不能有连续的两个 RED 结点
 * 5、从任一结点到叶子结点的所有路径都包含相同数目的 BLACK 结点数量
 *
 * 红黑树与4阶B树的等价变换
 * 1、红黑树和4阶B树具有等价性
 * 2、BLACK结点与它的RED子结点融合在一起，形成一个B树结点
 * 3、红黑树的BLACK结点个数与4阶B树的结点总个数相等
 *
 * parent: 父结点
 * sibling: 兄弟结点
 * uncle：叔父结点（parent的兄弟结点）
 * grand：祖父结点（parent的父结点）
 *
 * 红黑树平衡标准比较宽松：没有一条路径会大于其它路径的2倍
 * 最大高度是 2 * log(n+1) (100w个结点，红黑树最大树高40）
 * 搜索添加删除都是O(logN)复杂度，其中添加、删除都仅需O(1)次旋转调整
 *
 * 相对于AVL树，红黑树牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作，整体来说性能优于AVL树。
 * 红黑树的平均统计性能优于AVL树，实际应用更多选择红黑树。
 */
public class RedBlackTree  {
}
